{"version":3,"sources":["components/MapVisualization.js","components/TimelineChart.js","components/StateRankingChart.js","components/NuclearProximityAnalysis.js","components/ProximityAnalysis.js","components/DataControls.js","utils/dataProcessing.js","utils/dataOptimization.js","App.js","reportWebVitals.js","index.js"],"names":["MapVisualization","_ref","ufoData","militaryBaseData","nuclearReactorData","usMapData","viewMode","isRendering","renderingProgress","mapRef","useRef","dimensions","setDimensions","useState","width","height","optimizedData","setOptimizedData","useEffect","current","updateDimensions","clientWidth","Math","max","window","innerHeight","addEventListener","removeEventListener","addLegend","useCallback","svg","select","remove","legend","append","attr","text","addZoomControls","projection","path","zoom","d3","scaleExtent","on","event","transform","call","controls","zoomIn","style","transition","duration","scaleBy","zoomOut","renderHeatmap","data","length","densityData","x","d","longitude","latitude","y","size","bandwidth","thresholds","color","domain","selectAll","enter","value","mapContainer","translate","scale","objects","states","topojson","features","tooltip","coords","sqrt","count","this","content","toFixed","city","state","date","shape","html","pageX","pageY","parseFloat","name","type","React","createElement","className","ref","TimelineChart","yearRange","svgRef","tooltipRef","handleResize","containerWidth","parentElement","margin","innerWidth","yearCounts","v","year","yearData","Array","from","_ref2","sort","a","b","xScale","range","yScale","g","xAxis","ticks","tickFormat","yAxis","line","curve","datum","join","stateNameMap","AL","AK","AZ","AR","CA","CO","CT","DE","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY","DC","PR","GU","VI","AS","MP","BC","ON","QC","AB","Wa","Ca","Tx","Fl","Ny","","StateRankingChart","stateCounts","console","log","keys","stateData","stateCode","toUpperCase","stateName","warn","slice","map","padding","currentTarget","toLocaleString","NuclearProximityAnalysis","sightingsWithDistance","sighting","distances","reactor","dLat","PI","dLon","sin","cos","atan2","nearestReactorDistance","min","distanceRanges","distanceCounts","maxDist","filter","s","distance","percentage","toString","ProximityAnalysis","facilityData","facilityType","distanceThresholds","proximityData","minDistance","Infinity","nearestFacility","forEach","facility","calculateDistance","lat1","lon1","lat2","lon2","item","thresholdCounts","threshold","barGroups","barColor","DataControls","onYearRangeChange","selectedStates","onStateSelection","allStates","selectedShapes","onShapeSelection","ufoShapes","showMilitaryBases","onToggleMilitaryBases","showNuclearReactors","onToggleNuclearReactors","onViewModeChange","dataOptimizationLevel","onDataOptimizationChange","isExpanded","setIsExpanded","tempYearRange","setTempYearRange","stateSearchTerm","setStateSearchTerm","shapeSearchTerm","setShapeSearchTerm","handleYearInputChange","index","newRange","parseInt","filteredStates","toLowerCase","includes","filteredShapes","onClick","onChange","e","target","applyYearRange","validRange","placeholder","key","checked","handleStateToggle","handleShapeToggle","charAt","processUFOData","csvText","Papa","parse","header","skipEmptyLines","dynamicTyping","Date","datetime","getFullYear","processMilitaryBaseData","base","processNuclearReactorData","sampleDataset","maxPoints","arguments","undefined","preserveOutliers","samplingRatio","dataByState","push","sampledData","Object","entries","statePointCount","round","stateSample","sampleArray","array","shuffled","i","j","floor","random","clusterPoints","radius","clusters","processed","Set","point","has","cluster","points","center","add","otherPoint","otherIndex","p1","p2","pow","reduce","sum","p","App","setUfoData","setMilitaryBaseData","setNuclearReactorData","setUsMapData","loading","setLoading","error","setError","loadingProgress","setLoadingProgress","dataStats","setDataStats","totalSightings","filteredSightings","militaryBases","nuclearFacilities","dateRange","topState","topShape","setYearRange","setSelectedStates","setSelectedShapes","setShowMilitaryBases","setShowNuclearReactors","setViewMode","activeTab","setActiveTab","setDataOptimizationLevel","setIsRendering","setRenderingProgress","async","ufoResponse","fetch","ok","Error","status","statusText","ufoText","processedUFOData","basesResponse","basesText","processedBaseData","reactorResponse","reactorText","processedReactorData","mapResponse","mapData","json","setTimeout","err","message","fetchData","filteredUFOData","yearMatch","stateMatch","shapeMatch","optimizedUFOData","setOptimizedUFOData","optimizeData","renderingInterval","setInterval","prev","clearInterval","shapeCounts","years","minYear","maxYear","location","reload","dataType","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.9b75578f.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport * as topojson from 'topojson-client';\nimport '../styles/components/MapVisualization.css';\n\nconst MapVisualization = ({ \n  ufoData, \n  militaryBaseData, \n  nuclearReactorData, \n  usMapData, \n  viewMode,\n  isRendering,\n  renderingProgress\n}) => {\n  const mapRef = useRef(null);\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n  const [optimizedData, setOptimizedData] = useState([]);\n  \n  // Get container dimensions\n  useEffect(() => {\n    if (!mapRef.current) return;\n    \n    const updateDimensions = () => {\n      const width = mapRef.current.clientWidth;\n      const height = Math.max(500, window.innerHeight * 0.6);\n      setDimensions({ width, height });\n    };\n    \n    updateDimensions();\n    window.addEventListener('resize', updateDimensions);\n    \n    return () => window.removeEventListener('resize', updateDimensions);\n  }, []);\n  \n  // Process and optimize data for visualization\n  useEffect(() => {\n    if (!ufoData) return;\n    setOptimizedData(ufoData);\n  }, [ufoData]);\n  \n  // Define callback functions for reuse in useEffect\n  const addLegend = useCallback((svg) => {\n    // Remove any existing legend\n    svg.select('.legend').remove();\n    \n    // Create legend group\n    const legend = svg.append('g')\n      .attr('class', 'legend')\n      .attr('transform', `translate(${dimensions.width - 160}, 20)`);\n    \n    // Add background\n    legend.append('rect')\n      .attr('width', 150)\n      .attr('height', 120)\n      .attr('fill', 'rgba(0, 0, 0, 0.7)')\n      .attr('rx', 5);\n    \n    // Add title\n    legend.append('text')\n      .attr('x', 75)\n      .attr('y', 20)\n      .attr('text-anchor', 'middle')\n      .attr('fill', '#fff')\n      .text('Legend');\n    \n    // Add UFO sightings\n    legend.append('circle')\n      .attr('cx', 20)\n      .attr('cy', 40)\n      .attr('r', 5)\n      .attr('fill', 'rgba(100, 255, 218, 0.7)');\n    \n    legend.append('text')\n      .attr('x', 35)\n      .attr('y', 45)\n      .attr('fill', '#fff')\n      .text('UFO Sightings');\n    \n    // Add military bases\n    legend.append('rect')\n      .attr('x', 15)\n      .attr('y', 60)\n      .attr('width', 10)\n      .attr('height', 10)\n      .attr('fill', 'rgba(220, 20, 60, 0.7)');\n    \n    legend.append('text')\n      .attr('x', 35)\n      .attr('y', 70)\n      .attr('fill', '#fff')\n      .text('Military Bases');\n    \n    // Add nuclear facilities\n    legend.append('polygon')\n      .attr('points', '20,100 15,90 25,90')\n      .attr('fill', 'rgba(255, 165, 0, 0.7)');\n    \n    legend.append('text')\n      .attr('x', 35)\n      .attr('y', 95)\n      .attr('fill', '#fff')\n      .text('Nuclear Facilities');\n  }, [dimensions]);\n  \n  // Add zoom controls\n  const addZoomControls = useCallback((svg, projection, path) => {\n    // Remove any existing controls\n    svg.select('.zoom-controls').remove();\n    \n    // Create zoom behavior\n    const zoom = d3.zoom()\n      .scaleExtent([1, 8])\n      .on('zoom', (event) => {\n        svg.select('.map-container')\n          .attr('transform', event.transform);\n      });\n    \n    // Apply zoom behavior to svg\n    svg.call(zoom);\n    \n    // Create controls group\n    const controls = svg.append('g')\n      .attr('class', 'zoom-controls')\n      .attr('transform', `translate(20, ${dimensions.height - 100})`);\n    \n    // Add background\n    controls.append('rect')\n      .attr('width', 40)\n      .attr('height', 80)\n      .attr('fill', 'rgba(0, 0, 0, 0.7)')\n      .attr('rx', 5);\n    \n    // Add zoom in button\n    const zoomIn = controls.append('g')\n      .attr('class', 'zoom-button')\n      .attr('transform', 'translate(0, 0)')\n      .style('cursor', 'pointer');\n    \n    zoomIn.append('rect')\n      .attr('width', 40)\n      .attr('height', 40)\n      .attr('fill', 'transparent');\n    \n    zoomIn.append('text')\n      .attr('x', 20)\n      .attr('y', 25)\n      .attr('text-anchor', 'middle')\n      .attr('fill', '#fff')\n      .style('font-size', '20px')\n      .text('+');\n    \n    zoomIn.on('click', () => {\n      svg.transition()\n        .duration(300)\n        .call(zoom.scaleBy, 1.5);\n    });\n    \n    // Add zoom out button\n    const zoomOut = controls.append('g')\n      .attr('class', 'zoom-button')\n      .attr('transform', 'translate(0, 40)')\n      .style('cursor', 'pointer');\n    \n    zoomOut.append('rect')\n      .attr('width', 40)\n      .attr('height', 40)\n      .attr('fill', 'transparent');\n    \n    zoomOut.append('text')\n      .attr('x', 20)\n      .attr('y', 25)\n      .attr('text-anchor', 'middle')\n      .attr('fill', '#fff')\n      .style('font-size', '20px')\n      .text('−');\n    \n    zoomOut.on('click', () => {\n      svg.transition()\n        .duration(300)\n        .call(zoom.scaleBy, 0.75);\n    });\n  }, [dimensions]);\n  \n  // Function to render heatmap\n  const renderHeatmap = useCallback((svg, data, projection) => {\n    if (!data || data.length === 0) return;\n    \n    // Create a density scale\n    const densityData = d3.contourDensity()\n      .x(d => projection([d.longitude, d.latitude])[0])\n      .y(d => projection([d.longitude, d.latitude])[1])\n      .size([dimensions.width, dimensions.height])\n      .bandwidth(20)\n      .thresholds(30)\n      (data);\n    \n    // Create a color scale\n    const color = d3.scaleSequential(d3.interpolateInferno)\n      .domain([0, 0.1]); // Adjust domain based on your data density\n    \n    // Draw the heatmap\n    svg.append('g')\n      .attr('class', 'heatmap')\n      .selectAll('path')\n      .data(densityData)\n      .enter()\n      .append('path')\n      .attr('d', d3.geoPath())\n      .attr('fill', d => color(d.value))\n      .attr('opacity', 0.7);\n  }, [dimensions]);\n  \n  // Main rendering effect\n  useEffect(() => {\n    if (!mapRef.current || !dimensions.width || !dimensions.height || !optimizedData || !usMapData) return;\n    \n    const width = dimensions.width;\n    const height = dimensions.height;\n    \n    const svg = d3.select(mapRef.current).select('svg');\n    \n    // Clear existing elements\n    svg.selectAll('*').remove();\n    \n    // Set SVG dimensions\n    svg\n      .attr('width', width)\n      .attr('height', height)\n      .attr('viewBox', [0, 0, width, height]);\n    \n    // Create a container for all map elements\n    const mapContainer = svg.append('g')\n      .attr('class', 'map-container');\n    \n    // Set up the map projection\n    const projection = d3.geoAlbersUsa()\n      .translate([width / 2, height / 2])\n      .scale(width);\n    \n    const path = d3.geoPath().projection(projection);\n    \n    // Draw the US states\n    if (usMapData && usMapData.objects && usMapData.objects.states) {\n      const states = topojson.feature(usMapData, usMapData.objects.states).features;\n      \n      mapContainer.append('g')\n        .selectAll('path')\n        .data(states)\n        .enter()\n        .append('path')\n        .attr('d', path)\n        .attr('class', 'state')\n        .attr('fill', '#2a2a2a')\n        .attr('stroke', '#3a3a3a')\n        .attr('stroke-width', 0.5);\n    }\n    \n    // Create a tooltip\n    const tooltip = d3.select(mapRef.current)\n      .append('div')\n      .attr('class', 'tooltip')\n      .style('opacity', 0);\n    \n    // Render based on view mode\n    if (viewMode === 'heatmap') {\n      renderHeatmap(mapContainer, optimizedData, projection);\n    } else {\n      // Render UFO sightings as points\n      const points = mapContainer.append('g')\n        .attr('class', 'points');\n      \n      points.selectAll('circle')\n        .data(optimizedData)\n        .enter()\n        .append('circle')\n        .attr('cx', d => {\n          const coords = projection([d.longitude, d.latitude]);\n          return coords ? coords[0] : null;\n        })\n        .attr('cy', d => {\n          const coords = projection([d.longitude, d.latitude]);\n          return coords ? coords[1] : null;\n        })\n        .attr('r', viewMode === 'clusters' ? d => Math.sqrt(d.count || 1) * 2 : 3)\n        .attr('fill', 'rgba(100, 255, 218, 0.7)')\n        .attr('stroke', 'rgba(100, 255, 218, 0.9)')\n        .attr('stroke-width', 0.5)\n        .attr('class', 'ufo-point')\n        .on('mouseover', function(event, d) {\n          d3.select(this)\n            .attr('r', viewMode === 'clusters' ? Math.sqrt(d.count || 1) * 2.5 : 5)\n            .attr('fill', 'rgba(100, 255, 218, 1)');\n          \n          tooltip.transition()\n            .duration(200)\n            .style('opacity', 0.9);\n          \n          const content = viewMode === 'clusters' \n            ? `<strong>${d.count} Sightings</strong><br>Center: ${d.latitude.toFixed(2)}, ${d.longitude.toFixed(2)}`\n            : `<strong>${d.city}, ${d.state}</strong><br>${d.date}<br>${d.shape || 'Unknown'} shape<br>${d.duration || 'Unknown'} duration`;\n          \n          tooltip.html(content)\n            .style('left', (event.pageX + 10) + 'px')\n            .style('top', (event.pageY - 28) + 'px');\n        })\n        .on('mouseout', function() {\n          d3.select(this)\n            .attr('r', viewMode === 'clusters' ? d => Math.sqrt(d.count || 1) * 2 : 3)\n            .attr('fill', 'rgba(100, 255, 218, 0.7)');\n          \n          tooltip.transition()\n            .duration(500)\n            .style('opacity', 0);\n        });\n    }\n    \n    // Render military bases if available\n    if (militaryBaseData && militaryBaseData.length > 0) {\n      mapContainer.append('g')\n        .attr('class', 'military-bases')\n        .selectAll('rect')\n        .data(militaryBaseData)\n        .enter()\n        .append('rect')\n        .attr('x', d => {\n          const coords = projection([d.longitude, d.latitude]);\n          return coords ? coords[0] - 4 : null;\n        })\n        .attr('y', d => {\n          const coords = projection([d.longitude, d.latitude]);\n          return coords ? coords[1] - 4 : null;\n        })\n        .attr('width', 8)\n        .attr('height', 8)\n        .attr('fill', 'rgba(220, 20, 60, 0.7)')\n        .attr('stroke', 'rgba(220, 20, 60, 0.9)')\n        .attr('stroke-width', 0.5)\n        .attr('class', 'military-base')\n        .on('mouseover', function(event, d) {\n          d3.select(this)\n            .attr('width', 10)\n            .attr('height', 10)\n            .attr('x', function() { return parseFloat(d3.select(this).attr('x')) - 1; })\n            .attr('y', function() { return parseFloat(d3.select(this).attr('y')) - 1; })\n            .attr('fill', 'rgba(220, 20, 60, 1)');\n          \n          tooltip.transition()\n            .duration(200)\n            .style('opacity', 0.9);\n          \n          tooltip.html(`<strong>${d.name}</strong><br>${d.city}, ${d.state}<br>Type: ${d.type || 'Military Base'}`)\n            .style('left', (event.pageX + 10) + 'px')\n            .style('top', (event.pageY - 28) + 'px');\n        })\n        .on('mouseout', function() {\n          d3.select(this)\n            .attr('width', 8)\n            .attr('height', 8)\n            .attr('x', function() { return parseFloat(d3.select(this).attr('x')) + 1; })\n            .attr('y', function() { return parseFloat(d3.select(this).attr('y')) + 1; })\n            .attr('fill', 'rgba(220, 20, 60, 0.7)');\n          \n          tooltip.transition()\n            .duration(500)\n            .style('opacity', 0);\n        });\n    }\n    \n    // Render nuclear reactors if available\n    if (nuclearReactorData && nuclearReactorData.length > 0) {\n      mapContainer.append('g')\n        .attr('class', 'nuclear-reactors')\n        .selectAll('polygon')\n        .data(nuclearReactorData)\n        .enter()\n        .append('polygon')\n        .attr('points', d => {\n          const coords = projection([d.longitude, d.latitude]);\n          if (!coords) return null;\n          const x = coords[0];\n          const y = coords[1];\n          return `${x},${y-6} ${x-5},${y+4} ${x+5},${y+4}`;\n        })\n        .attr('fill', 'rgba(255, 165, 0, 0.7)')\n        .attr('stroke', 'rgba(255, 165, 0, 0.9)')\n        .attr('stroke-width', 0.5)\n        .attr('class', 'nuclear-reactor')\n        .on('mouseover', function(event, d) {\n          d3.select(this)\n            .attr('transform', 'scale(1.2)')\n            .attr('fill', 'rgba(255, 165, 0, 1)');\n          \n          tooltip.transition()\n            .duration(200)\n            .style('opacity', 0.9);\n          \n          tooltip.html(`<strong>${d.name}</strong><br>${d.city}, ${d.state}<br>Type: Nuclear Facility`)\n            .style('left', (event.pageX + 10) + 'px')\n            .style('top', (event.pageY - 28) + 'px');\n        })\n        .on('mouseout', function() {\n          d3.select(this)\n            .attr('transform', 'scale(1)')\n            .attr('fill', 'rgba(255, 165, 0, 0.7)');\n          \n          tooltip.transition()\n            .duration(500)\n            .style('opacity', 0);\n        });\n    }\n    \n    // Add legend and zoom controls\n    addLegend(svg);\n    addZoomControls(svg, projection, path);\n    \n  }, [optimizedData, militaryBaseData, nuclearReactorData, usMapData, dimensions, viewMode, addLegend, addZoomControls, renderHeatmap]);\n  \n  return (\n    <div className=\"map-visualization-container\" ref={mapRef}>\n      <svg></svg>\n      {isRendering && (\n        <div className=\"rendering-overlay\">\n          <div className=\"rendering-progress\">\n            <div className=\"progress-bar\" style={{ width: `${renderingProgress}%` }}></div>\n          </div>\n          <div className=\"rendering-text\">Rendering visualization... {renderingProgress}%</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MapVisualization;","import React, { useRef, useEffect, useState } from 'react';\r\nimport * as d3 from 'd3';\r\nimport '../styles/components/TimelineChart.css';\r\n\r\nconst TimelineChart = ({ ufoData, yearRange }) => {\r\n  const svgRef = useRef();\r\n  const tooltipRef = useRef();\r\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\r\n  \r\n  // Handle window resize\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      const containerWidth = svgRef.current.parentElement.clientWidth;\r\n      setDimensions({\r\n        width: containerWidth,\r\n        height: 300, // Fixed height\r\n      });\r\n    };\r\n    \r\n    handleResize();\r\n    window.addEventListener('resize', handleResize);\r\n    \r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n  \r\n  // Draw timeline chart\r\n  useEffect(() => {\r\n    if (!ufoData.length || !dimensions.width || !dimensions.height) return;\r\n    \r\n    const svg = d3.select(svgRef.current);\r\n    const tooltip = d3.select(tooltipRef.current);\r\n    \r\n    // Clear previous rendering\r\n    svg.selectAll('*').remove();\r\n    \r\n    svg\r\n      .attr('width', dimensions.width)\r\n      .attr('height', dimensions.height)\r\n      .attr('viewBox', [0, 0, dimensions.width, dimensions.height])\r\n      .attr('style', 'max-width: 100%; height: auto;');\r\n    \r\n    // Add title\r\n    svg.append('text')\r\n      .attr('x', dimensions.width / 2)\r\n      .attr('y', 20)\r\n      .attr('text-anchor', 'middle')\r\n      .style('font-size', '16px')\r\n      .style('font-weight', 'bold')\r\n      .text('UFO Sightings Over Time');\r\n    \r\n    // Set margins\r\n    const margin = { top: 40, right: 30, bottom: 60, left: 60 };\r\n    const innerWidth = dimensions.width - margin.left - margin.right;\r\n    const innerHeight = dimensions.height - margin.top - margin.bottom;\r\n    \r\n    // Aggregate data by year\r\n    const yearCounts = d3.rollup(\r\n      ufoData,\r\n      v => v.length,\r\n      d => d.year\r\n    );\r\n    \r\n    // Convert to array for line chart\r\n    const yearData = Array.from(yearCounts, ([year, count]) => ({ year, count }))\r\n      .sort((a, b) => a.year - b.year);\r\n    \r\n    // Create scales\r\n    const xScale = d3.scaleLinear()\r\n      .domain([d3.min(yearData, d => d.year), d3.max(yearData, d => d.year)])\r\n      .range([0, innerWidth]);\r\n    \r\n    const yScale = d3.scaleLinear()\r\n      .domain([0, d3.max(yearData, d => d.count) * 1.1]) // Add 10% padding\r\n      .range([innerHeight, 0]);\r\n    \r\n    // Create main group\r\n    const g = svg.append('g')\r\n      .attr('transform', `translate(${margin.left}, ${margin.top})`);\r\n    \r\n    // Add axes\r\n    const xAxis = d3.axisBottom(xScale)\r\n      .ticks(10)\r\n      .tickFormat(d => d);\r\n    \r\n    g.append('g')\r\n      .attr('transform', `translate(0, ${innerHeight})`)\r\n      .call(xAxis);\r\n    \r\n    const yAxis = d3.axisLeft(yScale)\r\n      .ticks(10);\r\n    \r\n    g.append('g')\r\n      .call(yAxis);\r\n    \r\n    // Add axis labels\r\n    g.append('text')\r\n      .attr('transform', `translate(${innerWidth / 2}, ${innerHeight + 40})`)\r\n      .style('text-anchor', 'middle')\r\n      .text('Year');\r\n    \r\n    g.append('text')\r\n      .attr('transform', 'rotate(-90)')\r\n      .attr('y', -40)\r\n      .attr('x', -innerHeight / 2)\r\n      .style('text-anchor', 'middle')\r\n      .text('Number of Sightings');\r\n    \r\n    // Create line generator\r\n    const line = d3.line()\r\n      .x(d => xScale(d.year))\r\n      .y(d => yScale(d.count))\r\n      .curve(d3.curveMonotoneX);\r\n    \r\n    // Add the line\r\n    g.append('path')\r\n      .datum(yearData)\r\n      .attr('fill', 'none')\r\n      .attr('stroke', 'steelblue')\r\n      .attr('stroke-width', 2)\r\n      .attr('d', line);\r\n    \r\n    // Add dots for each data point\r\n    g.selectAll('.dot')\r\n      .data(yearData)\r\n      .join('circle')\r\n      .attr('class', 'dot')\r\n      .attr('cx', d => xScale(d.year))\r\n      .attr('cy', d => yScale(d.count))\r\n      .attr('r', 4)\r\n      .attr('fill', 'steelblue')\r\n      .on('mouseover', (event, d) => {\r\n        tooltip\r\n          .style('opacity', 1)\r\n          .html(`<strong>${d.year}</strong>: ${d.count} sightings`)\r\n          .style('left', (event.pageX + 10) + 'px')\r\n          .style('top', (event.pageY - 28) + 'px');\r\n      })\r\n      .on('mouseout', () => {\r\n        tooltip.style('opacity', 0);\r\n      });\r\n    \r\n  }, [ufoData, dimensions]);\r\n  \r\n  return (\r\n    <div className=\"timeline-container\">\r\n      <svg ref={svgRef}></svg>\r\n      <div className=\"tooltip\" ref={tooltipRef}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimelineChart;","import React, { useRef, useEffect, useState } from 'react';\r\nimport * as d3 from 'd3';\r\nimport '../styles/components/StateRankingChart.css';\r\n\r\n// Add this state abbreviation to full name mapping\r\nconst stateNameMap = {\r\n  'AL': 'Alabama',\r\n  'AK': 'Alaska',\r\n  'AZ': 'Arizona',\r\n  'AR': 'Arkansas',\r\n  'CA': 'California',\r\n  'CO': 'Colorado',\r\n  'CT': 'Connecticut',\r\n  'DE': 'Delaware',\r\n  'FL': 'Florida',\r\n  'GA': 'Georgia',\r\n  'HI': 'Hawaii',\r\n  'ID': 'Idaho',\r\n  'IL': 'Illinois',\r\n  'IN': 'Indiana',\r\n  'IA': 'Iowa',\r\n  'KS': 'Kansas',\r\n  'KY': 'Kentucky',\r\n  'LA': 'Louisiana',\r\n  'ME': 'Maine',\r\n  'MD': 'Maryland',\r\n  'MA': 'Massachusetts',\r\n  'MI': 'Michigan',\r\n  'MN': 'Minnesota',\r\n  'MS': 'Mississippi',\r\n  'MO': 'Missouri',\r\n  'MT': 'Montana',\r\n  'NE': 'Nebraska',\r\n  'NV': 'Nevada',\r\n  'NH': 'New Hampshire',\r\n  'NJ': 'New Jersey',\r\n  'NM': 'New Mexico',\r\n  'NY': 'New York',\r\n  'NC': 'North Carolina',\r\n  'ND': 'North Dakota',\r\n  'OH': 'Ohio',\r\n  'OK': 'Oklahoma',\r\n  'OR': 'Oregon',\r\n  'PA': 'Pennsylvania',\r\n  'RI': 'Rhode Island',\r\n  'SC': 'South Carolina',\r\n  'SD': 'South Dakota',\r\n  'TN': 'Tennessee',\r\n  'TX': 'Texas',\r\n  'UT': 'Utah',\r\n  'VT': 'Vermont',\r\n  'VA': 'Virginia',\r\n  'WA': 'Washington',\r\n  'WV': 'West Virginia',\r\n  'WI': 'Wisconsin',\r\n  'WY': 'Wyoming',\r\n  'DC': 'District of Columbia',\r\n  // Add potential missing territories/regions\r\n  'PR': 'Puerto Rico',\r\n  'GU': 'Guam',\r\n  'VI': 'Virgin Islands',\r\n  'AS': 'American Samoa',\r\n  'MP': 'Northern Mariana Islands',\r\n  // Canadian provinces that might be in the data\r\n  'BC': 'British Columbia',\r\n  'ON': 'Ontario',\r\n  'QC': 'Quebec',\r\n  'AB': 'Alberta',\r\n  // Add common variations or potential miscodings\r\n  'Wa': 'Washington',\r\n  'Ca': 'California',\r\n  'Tx': 'Texas',\r\n  'Fl': 'Florida',\r\n  'Ny': 'New York',\r\n  '': 'Unknown Location'\r\n};\r\n\r\nconst StateRankingChart = ({ ufoData }) => {\r\n  const svgRef = useRef();\r\n  const tooltipRef = useRef();\r\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\r\n  \r\n  // Handle window resize\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      const containerWidth = svgRef.current.parentElement.clientWidth;\r\n      setDimensions({\r\n        width: containerWidth,\r\n        height: 400, // Fixed height\r\n      });\r\n    };\r\n    \r\n    handleResize();\r\n    window.addEventListener('resize', handleResize);\r\n    \r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n  \r\n  // Draw bar chart\r\n  useEffect(() => {\r\n    if (!ufoData.length || !dimensions.width || !dimensions.height) return;\r\n    \r\n    const svg = d3.select(svgRef.current);\r\n    const tooltip = d3.select(tooltipRef.current);\r\n    \r\n    // Clear previous rendering\r\n    svg.selectAll('*').remove();\r\n    \r\n    svg\r\n      .attr('width', dimensions.width)\r\n      .attr('height', dimensions.height)\r\n      .attr('viewBox', [0, 0, dimensions.width, dimensions.height])\r\n      .attr('style', 'max-width: 100%; height: auto;');\r\n    \r\n    // Add title\r\n    svg.append('text')\r\n      .attr('x', dimensions.width / 2)\r\n      .attr('y', 20)\r\n      .attr('text-anchor', 'middle')\r\n      .style('font-size', '16px')\r\n      .style('font-weight', 'bold')\r\n      .text('Top 10 States by UFO Sightings');\r\n    \r\n    // Set margins\r\n    const margin = { top: 40, right: 30, bottom: 60, left: 120 }; // Increased left margin for longer state names\r\n    const innerWidth = dimensions.width - margin.left - margin.right;\r\n    const innerHeight = dimensions.height - margin.top - margin.bottom;\r\n    \r\n    // Group data by state\r\n    const stateCounts = d3.rollup(\r\n      ufoData,\r\n      v => v.length,\r\n      d => d.state\r\n    );\r\n    \r\n    // Log state codes to debug\r\n    console.log(\"State codes in data for ranking chart:\", Array.from(stateCounts.keys()));\r\n    \r\n    // Convert to array and sort by count descending\r\n    const stateData = Array.from(stateCounts, ([state, count]) => {\r\n      // Ensure state code is uppercase for proper mapping\r\n      const stateCode = state ? state.toUpperCase() : state;\r\n      \r\n      // Log each state code to identify the missing one\r\n      console.log(\"Processing state:\", state, \"count:\", count);\r\n      \r\n      // Add fallback for the unnamed state\r\n      let stateName = stateNameMap[stateCode];\r\n      if (!stateName) {\r\n        console.warn(\"Could not find state name for code:\", stateCode);\r\n        stateName = stateCode || \"Unknown State\";\r\n      }\r\n      \r\n      return {\r\n        state: stateCode,\r\n        stateName: stateName, \r\n        count\r\n      };\r\n    })\r\n      .sort((a, b) => b.count - a.count)\r\n      .slice(0, 10); // Get top 10\r\n    \r\n    console.log(\"Final top 10 states data:\", stateData);\r\n    \r\n    // Create scales\r\n    const xScale = d3.scaleLinear()\r\n      .domain([0, d3.max(stateData, d => d.count) * 1.1])\r\n      .range([0, innerWidth]);\r\n    \r\n    const yScale = d3.scaleBand()\r\n      .domain(stateData.map(d => d.stateName)) // Use the full state name\r\n      .range([0, innerHeight])\r\n      .padding(0.2);\r\n    \r\n    // Create main group\r\n    const g = svg.append('g')\r\n      .attr('transform', `translate(${margin.left}, ${margin.top})`);\r\n    \r\n    // Add axes\r\n    const xAxis = d3.axisBottom(xScale)\r\n      .ticks(6)\r\n      .tickFormat(d3.format(',d')); // Format numbers with commas\r\n    \r\n    g.append('g')\r\n      .attr('transform', `translate(0, ${innerHeight})`)\r\n      .call(xAxis);\r\n    \r\n    const yAxis = d3.axisLeft(yScale);\r\n    \r\n    g.append('g')\r\n      .call(yAxis);\r\n    \r\n    // Add axis labels\r\n    g.append('text')\r\n      .attr('transform', `translate(${innerWidth / 2}, ${innerHeight + 40})`)\r\n      .style('text-anchor', 'middle')\r\n      .text('Number of Sightings');\r\n    \r\n    // Add bars\r\n    g.selectAll('.bar')\r\n      .data(stateData)\r\n      .join('rect')\r\n      .attr('class', 'bar')\r\n      .attr('x', 0)\r\n      .attr('y', d => yScale(d.stateName))\r\n      .attr('width', d => xScale(d.count))\r\n      .attr('height', yScale.bandwidth())\r\n      .attr('fill', 'steelblue')\r\n      .on('mouseover', (event, d) => {\r\n        // Highlight the bar\r\n        d3.select(event.currentTarget)\r\n          .attr('fill', '#3a7ca5');\r\n        \r\n        tooltip\r\n          .style('opacity', 1)\r\n          .html(`<strong>${d.stateName}</strong>: ${d.count.toLocaleString()} sightings`)\r\n          .style('left', (event.pageX + 10) + 'px')\r\n          .style('top', (event.pageY - 28) + 'px');\r\n      })\r\n      .on('mouseout', (event) => {\r\n        // Restore original bar color\r\n        d3.select(event.currentTarget)\r\n          .attr('fill', 'steelblue');\r\n          \r\n        tooltip.style('opacity', 0);\r\n      });\r\n    \r\n    // Add value labels at the end of each bar\r\n    g.selectAll('.bar-label')\r\n      .data(stateData)\r\n      .join('text')\r\n      .attr('class', 'bar-label')\r\n      .attr('x', d => xScale(d.count) + 5)\r\n      .attr('y', d => yScale(d.stateName) + yScale.bandwidth() / 2 + 5)\r\n      .attr('font-size', '12px')\r\n      .text(d => d.count.toLocaleString());\r\n    \r\n  }, [ufoData, dimensions]);\r\n  \r\n  return (\r\n    <div className=\"state-ranking-container\">\r\n      <svg ref={svgRef}></svg>\r\n      <div className=\"tooltip\" ref={tooltipRef}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StateRankingChart;","import React, { useRef, useEffect, useState } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst NuclearProximityAnalysis = ({ ufoData, nuclearReactorData }) => {\r\n  const svgRef = useRef();\r\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\r\n  \r\n  // Handle window resize\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      const containerWidth = svgRef.current.parentElement.clientWidth;\r\n      setDimensions({\r\n        width: containerWidth,\r\n        height: 300,\r\n      });\r\n    };\r\n    \r\n    handleResize();\r\n    window.addEventListener('resize', handleResize);\r\n    \r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n  \r\n  // Draw proximity analysis chart\r\n  useEffect(() => {\r\n    if (!ufoData.length || !nuclearReactorData.length || !dimensions.width || !dimensions.height) return;\r\n    \r\n    const svg = d3.select(svgRef.current);\r\n    \r\n    // Clear previous rendering\r\n    svg.selectAll('*').remove();\r\n    \r\n    svg\r\n      .attr('width', dimensions.width)\r\n      .attr('height', dimensions.height)\r\n      .attr('viewBox', [0, 0, dimensions.width, dimensions.height])\r\n      .attr('style', 'max-width: 100%; height: auto;');\r\n    \r\n    // Calculate distance from each UFO sighting to the nearest nuclear reactor\r\n    const sightingsWithDistance = ufoData.map(sighting => {\r\n      // Use Haversine formula to calculate distances\r\n      const distances = nuclearReactorData.map(reactor => {\r\n        const R = 6371; // Earth's radius in km\r\n        const dLat = (reactor.latitude - sighting.latitude) * Math.PI / 180;\r\n        const dLon = (reactor.longitude - sighting.longitude) * Math.PI / 180;\r\n        const a = \r\n          Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n          Math.cos(sighting.latitude * Math.PI / 180) * Math.cos(reactor.latitude * Math.PI / 180) * \r\n          Math.sin(dLon/2) * Math.sin(dLon/2);\r\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n        return R * c;\r\n      });\r\n      \r\n      return {\r\n        ...sighting,\r\n        nearestReactorDistance: Math.min(...distances)\r\n      };\r\n    });\r\n    \r\n    // Group sightings by distance ranges\r\n    const distanceRanges = [10, 25, 50, 100, 200, 500, 1000];\r\n    const distanceCounts = distanceRanges.map(maxDist => {\r\n      const count = sightingsWithDistance.filter(s => s.nearestReactorDistance <= maxDist).length;\r\n      return { \r\n        distance: maxDist, \r\n        count, \r\n        percentage: (count / sightingsWithDistance.length) * 100 \r\n      };\r\n    });\r\n    \r\n    // Set margins\r\n    const margin = { top: 40, right: 30, bottom: 60, left: 60 };\r\n    const innerWidth = dimensions.width - margin.left - margin.right;\r\n    const innerHeight = dimensions.height - margin.top - margin.bottom;\r\n    \r\n    // Set up scales\r\n    const xScale = d3.scaleBand()\r\n      .domain(distanceRanges.map(d => d.toString()))\r\n      .range([0, innerWidth])\r\n      .padding(0.2);\r\n    \r\n    const yScale = d3.scaleLinear()\r\n      .domain([0, d3.max(distanceCounts, d => d.percentage) * 1.1])\r\n      .range([innerHeight, 0]);\r\n    \r\n    // Create main group\r\n    const g = svg.append('g')\r\n      .attr('transform', `translate(${margin.left}, ${margin.top})`);\r\n    \r\n    // Add title\r\n    svg.append('text')\r\n      .attr('x', dimensions.width / 2)\r\n      .attr('y', 20)\r\n      .attr('text-anchor', 'middle')\r\n      .style('font-size', '16px')\r\n      .style('font-weight', 'bold')\r\n      .text('UFO Sightings by Distance to Nearest Nuclear Reactor');\r\n    \r\n    // Add axes\r\n    const xAxis = d3.axisBottom(xScale);\r\n    g.append('g')\r\n      .attr('transform', `translate(0, ${innerHeight})`)\r\n      .call(xAxis);\r\n    \r\n    const yAxis = d3.axisLeft(yScale)\r\n      .tickFormat(d => `${d}%`);\r\n    g.append('g')\r\n      .call(yAxis);\r\n    \r\n    // Add axis labels\r\n    g.append('text')\r\n      .attr('transform', `translate(${innerWidth / 2}, ${innerHeight + 40})`)\r\n      .style('text-anchor', 'middle')\r\n      .text('Distance to Nearest Nuclear Reactor (km)');\r\n    \r\n    g.append('text')\r\n      .attr('transform', 'rotate(-90)')\r\n      .attr('y', -40)\r\n      .attr('x', -innerHeight / 2)\r\n      .style('text-anchor', 'middle')\r\n      .text('Percentage of UFO Sightings');\r\n    \r\n    // Add bars\r\n    g.selectAll('.bar')\r\n      .data(distanceCounts)\r\n      .join('rect')\r\n      .attr('class', 'bar')\r\n      .attr('x', d => xScale(d.distance.toString()))\r\n      .attr('y', d => yScale(d.percentage))\r\n      .attr('width', xScale.bandwidth())\r\n      .attr('height', d => innerHeight - yScale(d.percentage))\r\n      .attr('fill', 'rgba(50, 205, 50, 0.7)')\r\n      .on('mouseover', function(event, d) {\r\n        d3.select(this)\r\n          .attr('fill', 'rgba(50, 205, 50, 0.9)');\r\n          \r\n        const tooltip = d3.select('body').append('div')\r\n          .attr('class', 'tooltip')\r\n          .style('position', 'absolute')\r\n          .style('background', 'rgba(255, 255, 255, 0.9)')\r\n          .style('padding', '10px')\r\n          .style('border', '1px solid #ddd')\r\n          .style('border-radius', '4px')\r\n          .style('pointer-events', 'none')\r\n          .style('opacity', 0);\r\n          \r\n        tooltip\r\n          .style('opacity', 1)\r\n          .html(`\r\n            <strong>Within ${d.distance} km of a nuclear reactor:</strong><br>\r\n            ${d.count.toLocaleString()} UFO sightings (${d.percentage.toFixed(2)}%)\r\n          `)\r\n          .style('left', (event.pageX + 10) + 'px')\r\n          .style('top', (event.pageY - 28) + 'px');\r\n      })\r\n      .on('mouseout', function() {\r\n        d3.select(this)\r\n          .attr('fill', 'rgba(50, 205, 50, 0.7)');\r\n          \r\n        d3.selectAll('.tooltip').remove();\r\n      });\r\n    \r\n    // Add value labels on top of bars\r\n    g.selectAll('.bar-label')\r\n      .data(distanceCounts)\r\n      .join('text')\r\n      .attr('class', 'bar-label')\r\n      .attr('x', d => xScale(d.distance.toString()) + xScale.bandwidth() / 2)\r\n      .attr('y', d => yScale(d.percentage) - 5)\r\n      .attr('text-anchor', 'middle')\r\n      .attr('font-size', '10px')\r\n      .text(d => `${d.percentage.toFixed(1)}%`);\r\n    \r\n  }, [ufoData, nuclearReactorData, dimensions]);\r\n  \r\n  return (\r\n    <div className=\"nuclear-proximity-container\">\r\n      <svg ref={svgRef}></svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NuclearProximityAnalysis;","import React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport '../styles/components/ProximityAnalysis.css';\n\n// Haversine formula to calculate distance between two points on Earth\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\n  const R = 6371; // Radius of the Earth in km\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n    Math.sin(dLon/2) * Math.sin(dLon/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c; // Distance in km\n};\n\nconst ProximityAnalysis = ({ ufoData, facilityData, facilityType }) => {\n  const svgRef = useRef();\n  const tooltipRef = useRef();\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n  \n  // Handle window resize\n  useEffect(() => {\n    const handleResize = () => {\n      const containerWidth = svgRef.current.parentElement.clientWidth;\n      setDimensions({\n        width: containerWidth,\n        height: 300, // Fixed height\n      });\n    };\n    \n    handleResize();\n    window.addEventListener('resize', handleResize);\n    \n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  \n  // Analyze proximity data\n  useEffect(() => {\n    if (!ufoData.length || !facilityData.length || !dimensions.width || !dimensions.height) return;\n    \n    const svg = d3.select(svgRef.current);\n    const tooltip = d3.select(tooltipRef.current);\n    \n    // Clear previous rendering\n    svg.selectAll('*').remove();\n    \n    svg\n      .attr('width', dimensions.width)\n      .attr('height', dimensions.height)\n      .attr('viewBox', [0, 0, dimensions.width, dimensions.height])\n      .attr('style', 'max-width: 100%; height: auto;');\n    \n    // Set margins\n    const margin = { top: 40, right: 30, bottom: 60, left: 60 };\n    const innerWidth = dimensions.width - margin.left - margin.right;\n    const innerHeight = dimensions.height - margin.top - margin.bottom;\n    \n    // Define distance thresholds in km\n    const distanceThresholds = [10, 25, 50, 100, 250, 500, 1000];\n    \n    // Calculate distances for each UFO sighting to the nearest facility\n    const proximityData = ufoData.map(sighting => {\n      if (!sighting.latitude || !sighting.longitude) return null;\n      \n      // Find the nearest facility\n      let minDistance = Infinity;\n      let nearestFacility = null;\n      \n      facilityData.forEach(facility => {\n        if (!facility.latitude || !facility.longitude) return;\n        \n        const distance = calculateDistance(\n          sighting.latitude, sighting.longitude,\n          facility.latitude, facility.longitude\n        );\n        \n        if (distance < minDistance) {\n          minDistance = distance;\n          nearestFacility = facility;\n        }\n      });\n      \n      return {\n        sighting,\n        distance: minDistance,\n        facility: nearestFacility\n      };\n    }).filter(item => item !== null);\n    \n    // Count sightings within each distance threshold\n    const thresholdCounts = distanceThresholds.map(threshold => {\n      const count = proximityData.filter(item => item.distance <= threshold).length;\n      const percentage = (count / proximityData.length) * 100;\n      \n      return {\n        threshold,\n        count,\n        percentage\n      };\n    });\n    \n    // Create scales\n    const xScale = d3.scaleBand()\n      .domain(distanceThresholds.map(d => d.toString()))\n      .range([0, innerWidth])\n      .padding(0.2);\n    \n    const yScale = d3.scaleLinear()\n      .domain([0, 100])\n      .range([innerHeight, 0]);\n    \n    // Create main group\n    const g = svg.append('g')\n      .attr('transform', `translate(${margin.left}, ${margin.top})`);\n    \n    // Add title\n    svg.append('text')\n      .attr('x', dimensions.width / 2)\n      .attr('y', 20)\n      .attr('text-anchor', 'middle')\n      .style('font-size', '16px')\n      .style('font-weight', 'bold')\n      .text(`UFO Sightings Proximity to ${facilityType === 'military' ? 'Military Bases' : 'Nuclear Facilities'}`);\n    \n    // Add axes\n    const xAxis = d3.axisBottom(xScale)\n      .tickFormat(d => `${d} km`);\n    \n    g.append('g')\n      .attr('transform', `translate(0, ${innerHeight})`)\n      .call(xAxis)\n      .selectAll('text')\n      .style('text-anchor', 'end')\n      .attr('dx', '-.8em')\n      .attr('dy', '.15em')\n      .attr('transform', 'rotate(-45)');\n    \n    const yAxis = d3.axisLeft(yScale)\n      .ticks(10)\n      .tickFormat(d => `${d}%`);\n    \n    g.append('g')\n      .call(yAxis);\n    \n    // Add axis labels\n    g.append('text')\n      .attr('transform', `translate(${innerWidth / 2}, ${innerHeight + 50})`)\n      .style('text-anchor', 'middle')\n      .text('Distance Threshold');\n    \n    g.append('text')\n      .attr('transform', 'rotate(-90)')\n      .attr('y', -40)\n      .attr('x', -innerHeight / 2)\n      .style('text-anchor', 'middle')\n      .text('Percentage of Sightings');\n    \n    // Add bars\n    const barGroups = g.selectAll('.bar-group')\n      .data(thresholdCounts)\n      .join('g')\n      .attr('class', 'bar-group')\n      .attr('transform', d => `translate(${xScale(d.threshold.toString())}, 0)`);\n    \n    const barColor = facilityType === 'military' ? \n      'rgba(220, 20, 60, 0.7)' : // Crimson for military\n      'rgba(255, 165, 0, 0.7)';  // Orange for nuclear\n    \n    barGroups.append('rect')\n      .attr('class', 'bar')\n      .attr('x', 0)\n      .attr('y', d => yScale(d.percentage))\n      .attr('width', xScale.bandwidth())\n      .attr('height', d => innerHeight - yScale(d.percentage))\n      .attr('fill', barColor)\n      .attr('stroke', facilityType === 'military' ? \n        'rgba(220, 20, 60, 0.9)' : \n        'rgba(255, 165, 0, 0.9)')\n      .attr('stroke-width', 1)\n      .on('mouseover', function(event, d) {\n        d3.select(this)\n          .attr('fill', facilityType === 'military' ? \n            'rgba(220, 20, 60, 0.9)' : \n            'rgba(255, 165, 0, 0.9)');\n        \n        tooltip\n          .style('opacity', 1)\n          .html(`\n            <strong>Within ${d.threshold} km:</strong><br>\n            ${d.count.toLocaleString()} sightings<br>\n            ${d.percentage.toFixed(1)}% of total\n          `)\n          .style('left', (event.pageX + 10) + 'px')\n          .style('top', (event.pageY - 28) + 'px');\n      })\n      .on('mouseout', function() {\n        d3.select(this)\n          .attr('fill', barColor);\n        \n        tooltip.style('opacity', 0);\n      });\n    \n    // Add percentage labels on top of bars\n    barGroups.append('text')\n      .attr('class', 'bar-label')\n      .attr('x', xScale.bandwidth() / 2)\n      .attr('y', d => yScale(d.percentage) - 5)\n      .attr('text-anchor', 'middle')\n      .text(d => `${d.percentage.toFixed(1)}%`);\n    \n    // Add a horizontal reference line at 50%\n    g.append('line')\n      .attr('x1', 0)\n      .attr('x2', innerWidth)\n      .attr('y1', yScale(50))\n      .attr('y2', yScale(50))\n      .attr('stroke', 'rgba(255, 255, 255, 0.2)')\n      .attr('stroke-dasharray', '4');\n    \n    g.append('text')\n      .attr('x', innerWidth)\n      .attr('y', yScale(50) - 5)\n      .attr('text-anchor', 'end')\n      .attr('fill', 'rgba(255, 255, 255, 0.5)')\n      .style('font-size', '12px')\n      .text('50%');\n    \n  }, [ufoData, facilityData, facilityType, dimensions]);\n  \n  return (\n    <div className=\"proximity-analysis-container\">\n      <svg ref={svgRef}></svg>\n      <div className=\"tooltip\" ref={tooltipRef}></div>\n    </div>\n  );\n};\n\nexport default ProximityAnalysis;","import React, { useState, useEffect } from 'react';\nimport '../styles/components/DataControls.css';\n\nconst DataControls = ({\n  yearRange,\n  onYearRangeChange,\n  selectedStates,\n  onStateSelection,\n  allStates,\n  selectedShapes,\n  onShapeSelection,\n  ufoShapes,\n  showMilitaryBases,\n  onToggleMilitaryBases,\n  showNuclearReactors,\n  onToggleNuclearReactors,\n  viewMode,\n  onViewModeChange,\n  dataOptimizationLevel,\n  onDataOptimizationChange\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [tempYearRange, setTempYearRange] = useState(yearRange);\n  const [stateSearchTerm, setStateSearchTerm] = useState('');\n  const [shapeSearchTerm, setShapeSearchTerm] = useState('');\n  \n  // Update tempYearRange when yearRange prop changes\n  useEffect(() => {\n    setTempYearRange(yearRange);\n  }, [yearRange]);\n  \n  // Handle year range input change\n  const handleYearInputChange = (index, value) => {\n    const newRange = [...tempYearRange];\n    newRange[index] = parseInt(value, 10) || 0;\n    setTempYearRange(newRange);\n  };\n  \n  // Apply year range filter\n  const applyYearRange = () => {\n    // Ensure start year is not greater than end year\n    const validRange = [\n      Math.min(tempYearRange[0], tempYearRange[1]),\n      Math.max(tempYearRange[0], tempYearRange[1])\n    ];\n    onYearRangeChange(validRange);\n  };\n  \n  // Handle state selection\n  const handleStateToggle = (state) => {\n    if (selectedStates.includes(state)) {\n      onStateSelection(selectedStates.filter(s => s !== state));\n    } else {\n      onStateSelection([...selectedStates, state]);\n    }\n  };\n  \n  // Handle shape selection\n  const handleShapeToggle = (shape) => {\n    if (selectedShapes.includes(shape)) {\n      onShapeSelection(selectedShapes.filter(s => s !== shape));\n    } else {\n      onShapeSelection([...selectedShapes, shape]);\n    }\n  };\n  \n  // Filter states based on search term\n  const filteredStates = allStates\n    .filter(state => state.toLowerCase().includes(stateSearchTerm.toLowerCase()))\n    .sort();\n  \n  // Filter shapes based on search term\n  const filteredShapes = ufoShapes\n    .filter(shape => shape.toLowerCase().includes(shapeSearchTerm.toLowerCase()))\n    .sort();\n  \n  return (\n    <div className=\"controls-section\">\n      <div className=\"controls-title\">\n        <h3>Data Filters & Visualization Controls</h3>\n        <button onClick={() => setIsExpanded(!isExpanded)}>\n          {isExpanded ? '▲' : '▼'}\n        </button>\n      </div>\n      \n      {isExpanded && (\n        <div className=\"controls-grid\">\n          <div className=\"control-group\">\n            <label className=\"control-label\">Time Period</label>\n            <div className=\"range-slider\">\n              <div className=\"range-values\">\n                <span>{tempYearRange[0]}</span>\n                <span>{tempYearRange[1]}</span>\n              </div>\n              <input \n                type=\"range\" \n                min=\"1900\" \n                max=\"2023\" \n                value={tempYearRange[0]} \n                onChange={(e) => handleYearInputChange(0, e.target.value)}\n                className=\"range-slider-input\"\n              />\n              <input \n                type=\"range\" \n                min=\"1900\" \n                max=\"2023\" \n                value={tempYearRange[1]} \n                onChange={(e) => handleYearInputChange(1, e.target.value)}\n                className=\"range-slider-input\"\n              />\n              <button \n                onClick={applyYearRange}\n              >\n                Apply\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"control-group\">\n            <label className=\"control-label\">States</label>\n            <input \n              type=\"text\" \n              placeholder=\"Search states...\" \n              value={stateSearchTerm} \n              onChange={(e) => setStateSearchTerm(e.target.value)}\n              className=\"control-input\"\n            />\n            <div className=\"selection-list\">\n              {filteredStates.slice(0, 10).map(state => (\n                <div key={state} className=\"selection-item\">\n                  <label>\n                    <input \n                      type=\"checkbox\" \n                      checked={selectedStates.includes(state)} \n                      onChange={() => handleStateToggle(state)}\n                    />\n                    {state}\n                  </label>\n                </div>\n              ))}\n              {selectedStates.length > 0 && (\n                <button \n                  onClick={() => onStateSelection([])}\n                >\n                  Clear All ({selectedStates.length})\n                </button>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"control-group\">\n            <label className=\"control-label\">UFO Shapes</label>\n            <input \n              type=\"text\" \n              placeholder=\"Search shapes...\" \n              value={shapeSearchTerm} \n              onChange={(e) => setShapeSearchTerm(e.target.value)}\n              className=\"control-input\"\n            />\n            <div className=\"selection-list\">\n              {filteredShapes.slice(0, 10).map(shape => (\n                <div key={shape} className=\"selection-item\">\n                  <label>\n                    <input \n                      type=\"checkbox\" \n                      checked={selectedShapes.includes(shape)} \n                      onChange={() => handleShapeToggle(shape)}\n                    />\n                    {shape.charAt(0).toUpperCase() + shape.slice(1)}\n                  </label>\n                </div>\n              ))}\n              {selectedShapes.length > 0 && (\n                <button \n                  onClick={() => onShapeSelection([])}\n                >\n                  Clear All ({selectedShapes.length})\n                </button>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"control-group\">\n            <label className=\"control-label\">Facilities</label>\n            <div className=\"toggle-switches\">\n              <div className=\"toggle-switch\">\n                <label className=\"toggle-label\">\n                  <input \n                    type=\"checkbox\" \n                    checked={showMilitaryBases} \n                    onChange={onToggleMilitaryBases}\n                    className=\"toggle-input\"\n                  />\n                  <span className=\"toggle-slider\"></span>\n                  <span className=\"toggle-icon military\"></span>\n                  Military Bases\n                </label>\n              </div>\n              \n              <div className=\"toggle-switch\">\n                <label className=\"toggle-label\">\n                  <input \n                    type=\"checkbox\" \n                    checked={showNuclearReactors} \n                    onChange={onToggleNuclearReactors}\n                    className=\"toggle-input\"\n                  />\n                  <span className=\"toggle-slider\"></span>\n                  <span className=\"toggle-icon nuclear\"></span>\n                  Nuclear Facilities\n                </label>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"control-group\">\n            <label className=\"control-label\">View Mode</label>\n            <div className=\"view-mode-buttons\">\n              <button \n                className={`view-mode-button ${viewMode === 'map' ? 'active' : ''}`}\n                onClick={() => onViewModeChange('map')}\n              >\n                Map\n              </button>\n              <button \n                className={`view-mode-button ${viewMode === 'heatmap' ? 'active' : ''}`}\n                onClick={() => onViewModeChange('heatmap')}\n              >\n                Heatmap\n              </button>\n              <button \n                className={`view-mode-button ${viewMode === 'clusters' ? 'active' : ''}`}\n                onClick={() => onViewModeChange('clusters')}\n              >\n                Clusters\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"control-group\">\n            <label className=\"control-label\">Data Optimization</label>\n            <div className=\"optimization-select\">\n              <div \n                className={`optimization-option ${dataOptimizationLevel === 'none' ? 'active' : ''}`}\n                onClick={() => onDataOptimizationChange('none')}\n              >\n                None\n              </div>\n              <div \n                className={`optimization-option ${dataOptimizationLevel === 'low' ? 'active' : ''}`}\n                onClick={() => onDataOptimizationChange('low')}\n              >\n                Low\n              </div>\n              <div \n                className={`optimization-option ${dataOptimizationLevel === 'medium' ? 'active' : ''}`}\n                onClick={() => onDataOptimizationChange('medium')}\n              >\n                Medium\n              </div>\n              <div \n                className={`optimization-option ${dataOptimizationLevel === 'high' ? 'active' : ''}`}\n                onClick={() => onDataOptimizationChange('high')}\n              >\n                High\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DataControls;","import Papa from 'papaparse';\r\n\r\nexport const processUFOData = (csvText) => {\r\n  const results = Papa.parse(csvText, {\r\n    header: true,\r\n    skipEmptyLines: true,\r\n    dynamicTyping: true,\r\n  });\r\n  \r\n  // Process the data into the format we need\r\n  return results.data.filter(sighting => {\r\n    // Filter out entries without coordinates\r\n    return sighting.latitude && sighting.longitude;\r\n  }).map(sighting => {\r\n    // Extract year from date\r\n    const dateObj = new Date(sighting.datetime || sighting.date);\r\n    const year = dateObj.getFullYear();\r\n    \r\n    return {\r\n      ...sighting,\r\n      year,\r\n      latitude: parseFloat(sighting.latitude),\r\n      longitude: parseFloat(sighting.longitude),\r\n    };\r\n  });\r\n};\r\n\r\nexport const processMilitaryBaseData = (csvText) => {\r\n  const results = Papa.parse(csvText, {\r\n    header: true,\r\n    skipEmptyLines: true,\r\n    dynamicTyping: true,\r\n  });\r\n  \r\n  // Process the data into the format we need\r\n  return results.data.filter(base => {\r\n    // Filter out entries without coordinates\r\n    return base.latitude && base.longitude;\r\n  }).map(base => {\r\n    return {\r\n      ...base,\r\n      latitude: parseFloat(base.latitude),\r\n      longitude: parseFloat(base.longitude),\r\n    };\r\n  });\r\n};\r\n\r\nexport const processNuclearReactorData = (csvText) => {\r\n    const results = Papa.parse(csvText, {\r\n      header: true,\r\n      skipEmptyLines: true,\r\n      dynamicTyping: true,\r\n    });\r\n    \r\n    return results.data.filter(reactor => {\r\n      return reactor.latitude && reactor.longitude;\r\n    }).map(reactor => {\r\n      return {\r\n        name: reactor.name,\r\n        state: reactor.state,\r\n        latitude: parseFloat(reactor.latitude),\r\n        longitude: parseFloat(reactor.longitude),\r\n        type: reactor.type || \"Nuclear Facility\"\r\n      };\r\n    });\r\n  };","/**\n * Utility functions for optimizing data processing and visualization performance\n */\n\n/**\n * Samples a dataset to reduce its size while maintaining distribution\n * @param {Array} data - The full dataset\n * @param {number} maxPoints - Maximum number of points to include\n * @param {boolean} preserveOutliers - Whether to preserve outliers in the sampling\n * @returns {Array} - Sampled dataset\n */\nexport const sampleDataset = (data, maxPoints = 2000, preserveOutliers = true) => {\n  if (!data || data.length <= maxPoints) return data;\n  \n  // If we need to reduce the dataset size\n  const samplingRatio = maxPoints / data.length;\n  \n  // For preserving outliers, we'll use a stratified sampling approach\n  if (preserveOutliers) {\n    // Group data by state to ensure representation across regions\n    const dataByState = {};\n    data.forEach(item => {\n      const state = item.state || 'unknown';\n      if (!dataByState[state]) {\n        dataByState[state] = [];\n      }\n      dataByState[state].push(item);\n    });\n    \n    // Sample from each state proportionally\n    let sampledData = [];\n    Object.entries(dataByState).forEach(([state, stateData]) => {\n      const statePointCount = Math.max(1, Math.round(stateData.length * samplingRatio));\n      const stateSample = sampleArray(stateData, statePointCount);\n      sampledData = [...sampledData, ...stateSample];\n    });\n    \n    return sampledData;\n  }\n  \n  // Simple random sampling if not preserving outliers\n  return sampleArray(data, maxPoints);\n};\n\n/**\n * Randomly samples an array to the specified size\n * @param {Array} array - Input array\n * @param {number} size - Desired sample size\n * @returns {Array} - Sampled array\n */\nconst sampleArray = (array, size) => {\n  if (array.length <= size) return array;\n  \n  // Fisher-Yates shuffle and take first 'size' elements\n  const shuffled = [...array];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  \n  return shuffled.slice(0, size);\n};\n\n/**\n * Clusters points that are close to each other to reduce rendering load\n * @param {Array} data - Array of data points with latitude and longitude\n * @param {number} radius - Clustering radius in degrees\n * @returns {Array} - Clustered data\n */\nexport const clusterPoints = (data, radius = 0.1) => {\n  if (!data || data.length === 0) return [];\n  \n  const clusters = [];\n  const processed = new Set();\n  \n  // Helper function to calculate distance between two points\n  const distance = (p1, p2) => {\n    return Math.sqrt(\n      Math.pow(p1.latitude - p2.latitude, 2) + \n      Math.pow(p1.longitude - p2.longitude, 2)\n    );\n  };\n  \n  // Process each point\n  data.forEach((point, index) => {\n    if (processed.has(index)) return;\n    \n    // Start a new cluster\n    const cluster = {\n      points: [point],\n      center: { latitude: point.latitude, longitude: point.longitude },\n      count: 1\n    };\n    \n    processed.add(index);\n    \n    // Find all points within radius of this point\n    data.forEach((otherPoint, otherIndex) => {\n      if (processed.has(otherIndex) || index === otherIndex) return;\n      \n      if (distance(point, otherPoint) <= radius) {\n        cluster.points.push(otherPoint);\n        cluster.count++;\n        \n        // Update cluster center (average of all points)\n        cluster.center.latitude = cluster.points.reduce((sum, p) => sum + p.latitude, 0) / cluster.count;\n        cluster.center.longitude = cluster.points.reduce((sum, p) => sum + p.longitude, 0) / cluster.count;\n        \n        processed.add(otherIndex);\n      }\n    });\n    \n    clusters.push(cluster);\n  });\n  \n  return clusters;\n};\n\n/**\n * Creates a simplified dataset for initial rendering, with progressive detail loading\n * @param {Array} data - Full dataset\n * @param {number} initialCount - Number of points to include in initial render\n * @returns {Object} - Object containing initial and remaining data\n */\nexport const createProgressiveDataset = (data, initialCount = 500) => {\n  if (!data || data.length <= initialCount) {\n    return { initial: data, remaining: [] };\n  }\n  \n  // Sort data by importance (can be customized based on your criteria)\n  // Here we're using a simple approach prioritizing more recent sightings\n  const sortedData = [...data].sort((a, b) => {\n    // Sort by year (descending)\n    return (b.year || 0) - (a.year || 0);\n  });\n  \n  return {\n    initial: sortedData.slice(0, initialCount),\n    remaining: sortedData.slice(initialCount)\n  };\n};\n\n/**\n * Optimizes data for heatmap rendering\n * @param {Array} data - Array of data points with latitude and longitude\n * @returns {Array} - Optimized data for heatmap\n */\nexport const optimizeForHeatmap = (data) => {\n  if (!data) return [];\n  \n  // For heatmap, we just need lat, lng and intensity\n  return data.map(point => ({\n    latitude: point.latitude,\n    longitude: point.longitude,\n    intensity: 1 // Can be adjusted based on duration, multiple sightings, etc.\n  }));\n};\n\n/**\n * Calculates viewport-specific data to only render what's visible\n * @param {Array} data - Full dataset\n * @param {Object} bounds - Viewport bounds {north, south, east, west}\n * @returns {Array} - Data points within viewport\n */\nexport const getVisibleData = (data, bounds) => {\n  if (!data || !bounds) return [];\n  \n  return data.filter(point => {\n    return (\n      point.latitude <= bounds.north &&\n      point.latitude >= bounds.south &&\n      point.longitude <= bounds.east &&\n      point.longitude >= bounds.west\n    );\n  });\n};\n","import React, { useState, useEffect } from 'react';\nimport MapVisualization from './components/MapVisualization';\nimport TimelineChart from './components/TimelineChart';\nimport StateRankingChart from './components/StateRankingChart';\nimport NuclearProximityAnalysis from './components/NuclearProximityAnalysis';\nimport ProximityAnalysis from './components/ProximityAnalysis';\nimport DataControls from './components/DataControls';\nimport { processUFOData, processMilitaryBaseData, processNuclearReactorData } from './utils/dataProcessing';\nimport { sampleDataset, clusterPoints } from './utils/dataOptimization';\nimport './App.css';\n\nfunction App() {\n  const [ufoData, setUfoData] = useState([]);\n  const [militaryBaseData, setMilitaryBaseData] = useState([]);\n  const [nuclearReactorData, setNuclearReactorData] = useState([]);\n  const [usMapData, setUsMapData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [loadingProgress, setLoadingProgress] = useState(0);\n  const [dataStats, setDataStats] = useState({\n    totalSightings: 0,\n    filteredSightings: 0,\n    militaryBases: 0,\n    nuclearFacilities: 0,\n    dateRange: '',\n    topState: '',\n    topShape: ''\n  });\n  \n  // Filter states\n  const [yearRange, setYearRange] = useState([1950, 2023]); // Default range\n  const [selectedStates, setSelectedStates] = useState([]);\n  const [selectedShapes, setSelectedShapes] = useState([]);\n  const [showMilitaryBases, setShowMilitaryBases] = useState(true);\n  const [showNuclearReactors, setShowNuclearReactors] = useState(true);\n  const [viewMode, setViewMode] = useState('map'); // 'map', 'heatmap', 'clusters'\n  const [activeTab, setActiveTab] = useState('overview'); // 'overview', 'analysis', 'data'\n  const [dataOptimizationLevel, setDataOptimizationLevel] = useState('medium'); // 'none', 'low', 'medium', 'high'\n  const [isRendering, setIsRendering] = useState(false);\n  const [renderingProgress, setRenderingProgress] = useState(0);\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        console.log(\"Starting to fetch data...\");\n        setLoadingProgress(10);\n        \n        // Load UFO sightings data\n        console.log(\"Fetching UFO data...\");\n        const ufoResponse = await fetch(`${process.env.PUBLIC_URL}/data/ufo-sightings.csv`);\n        if (!ufoResponse.ok) {\n          throw new Error(`Failed to load UFO data: ${ufoResponse.status} ${ufoResponse.statusText}`);\n        }\n        const ufoText = await ufoResponse.text();\n        console.log(\"UFO data fetched successfully\");\n        const processedUFOData = processUFOData(ufoText);\n        setUfoData(processedUFOData);\n        setLoadingProgress(40);\n        \n        // Load military bases data\n        console.log(\"Fetching military bases data...\");\n        const basesResponse = await fetch(`${process.env.PUBLIC_URL}/data/military-bases.csv`);\n        if (!basesResponse.ok) {\n          throw new Error(`Failed to load military bases data: ${basesResponse.status} ${basesResponse.statusText}`);\n        }\n        const basesText = await basesResponse.text();\n        console.log(\"Military bases data fetched successfully\");\n        const processedBaseData = processMilitaryBaseData(basesText);\n        setMilitaryBaseData(processedBaseData);\n        setLoadingProgress(60);\n        \n        // Load nuclear reactor data\n        console.log(\"Fetching nuclear reactor data...\");\n        const reactorResponse = await fetch(`${process.env.PUBLIC_URL}/data/nuclear-reactors.csv`);\n        if (!reactorResponse.ok) {\n          throw new Error(`Failed to load nuclear reactor data: ${reactorResponse.status} ${reactorResponse.statusText}`);\n        }\n        const reactorText = await reactorResponse.text();\n        console.log(\"Nuclear reactor data fetched successfully\");\n        const processedReactorData = processNuclearReactorData(reactorText);\n        setNuclearReactorData(processedReactorData);\n        setLoadingProgress(80);\n        \n        // Load US map data\n        console.log(\"Fetching US map data...\");\n        const mapResponse = await fetch(`${process.env.PUBLIC_URL}/data/us-states.json`);\n        if (!mapResponse.ok) {\n          throw new Error(`Failed to load US map data: ${mapResponse.status} ${mapResponse.statusText}`);\n        }\n        const mapData = await mapResponse.json();\n        setUsMapData(mapData);\n        \n        console.log(\"All data loaded successfully!\");\n        setLoadingProgress(100);\n        setTimeout(() => setLoading(false), 500); // Small delay for smooth transition\n      } catch (err) {\n        console.error(\"Error loading data:\", err);\n        setError('Failed to load data: ' + err.message);\n        setLoading(false);\n      }\n    };\n    \n    fetchData();\n  }, []);\n  \n  // Extract unique UFO shapes for filtering\n  const ufoShapes = [...new Set(ufoData.map(d => d.shape))].filter(shape => shape && shape !== 'unknown');\n  \n  // Extract all states for filtering\n  const allStates = [...new Set(ufoData.map(d => d.state))].filter(state => state);\n  \n  // Filter data based on selected filters\n  const filteredUFOData = ufoData.filter(sighting => {\n    const yearMatch = sighting.year >= yearRange[0] && sighting.year <= yearRange[1];\n    const stateMatch = selectedStates.length === 0 || selectedStates.includes(sighting.state);\n    const shapeMatch = selectedShapes.length === 0 || selectedShapes.includes(sighting.shape);\n    return yearMatch && stateMatch && shapeMatch;\n  });\n  \n  // State for optimized data\n  const [optimizedUFOData, setOptimizedUFOData] = useState([]);\n  \n  // Apply data optimization when filtered data or optimization settings change\n  useEffect(() => {\n    const optimizeData = () => {\n      setIsRendering(true);\n      setRenderingProgress(10);\n      \n      // Simulate progressive rendering\n      const renderingInterval = setInterval(() => {\n        setRenderingProgress(prev => {\n          if (prev >= 95) {\n            clearInterval(renderingInterval);\n            return 95;\n          }\n          return prev + 5;\n        });\n      }, 100);\n      \n      let optimizedData = [...filteredUFOData];\n      \n      try {\n        // Apply sampling based on optimization level\n        if (dataOptimizationLevel !== 'none') {\n          const sampleRatio = \n            dataOptimizationLevel === 'low' ? 0.8 :\n            dataOptimizationLevel === 'medium' ? 0.5 :\n            dataOptimizationLevel === 'high' ? 0.3 : 1;\n          \n          optimizedData = sampleDataset(optimizedData, sampleRatio);\n        }\n        \n        // Apply clustering for cluster view mode\n        if (viewMode === 'clusters') {\n          const clusterRadius = \n            dataOptimizationLevel === 'low' ? 20 :\n            dataOptimizationLevel === 'medium' ? 40 :\n            dataOptimizationLevel === 'high' ? 60 : 30;\n          \n          optimizedData = clusterPoints(optimizedData, clusterRadius);\n        }\n        \n        // Finish rendering\n        setTimeout(() => {\n          clearInterval(renderingInterval);\n          setRenderingProgress(100);\n          setTimeout(() => {\n            setIsRendering(false);\n          }, 300);\n          \n          setOptimizedUFOData(optimizedData);\n        }, 500);\n      } catch (err) {\n        console.error(\"Error optimizing data:\", err);\n        clearInterval(renderingInterval);\n        setIsRendering(false);\n        setOptimizedUFOData(filteredUFOData); // Use original data if optimization fails\n      }\n    };\n    \n    optimizeData();\n    \n    // Cleanup function to clear any intervals if component unmounts during optimization\n    return () => {\n      setIsRendering(false);\n    };\n  }, [filteredUFOData, dataOptimizationLevel, viewMode]);\n  \n  // Update data stats when filtered data changes\n  useEffect(() => {\n    if (filteredUFOData.length > 0) {\n      // Find top state\n      const stateCounts = {};\n      filteredUFOData.forEach(sighting => {\n        if (sighting.state) {\n          stateCounts[sighting.state] = (stateCounts[sighting.state] || 0) + 1;\n        }\n      });\n      const topState = Object.entries(stateCounts)\n        .sort((a, b) => b[1] - a[1])[0][0];\n      \n      // Find top shape\n      const shapeCounts = {};\n      filteredUFOData.forEach(sighting => {\n        if (sighting.shape && sighting.shape !== 'unknown') {\n          shapeCounts[sighting.shape] = (shapeCounts[sighting.shape] || 0) + 1;\n        }\n      });\n      const topShape = Object.entries(shapeCounts).length > 0 \n        ? Object.entries(shapeCounts).sort((a, b) => b[1] - a[1])[0][0]\n        : 'N/A';\n      \n      // Find date range\n      const years = filteredUFOData\n        .map(d => d.year)\n        .filter(year => year);\n      const minYear = Math.min(...years);\n      const maxYear = Math.max(...years);\n      \n      setDataStats({\n        totalSightings: ufoData.length,\n        filteredSightings: filteredUFOData.length,\n        militaryBases: militaryBaseData.length,\n        nuclearFacilities: nuclearReactorData.length,\n        dateRange: `${minYear} - ${maxYear}`,\n        topState,\n        topShape\n      });\n    }\n  }, [filteredUFOData, ufoData.length, militaryBaseData.length, nuclearReactorData.length]);\n  \n  if (loading) {\n    return (\n      <div className=\"App\">\n        <div className=\"loading-container\">\n          <div className=\"loading-spinner\"></div>\n          <div className=\"loading-progress\">\n            <div \n              className=\"progress-bar\" \n              style={{ width: `${loadingProgress}%` }}\n            ></div>\n          </div>\n          <p className=\"loading-text\">Loading UFO sightings data... {loadingProgress}%</p>\n        </div>\n      </div>\n    );\n  }\n  \n  if (error) {\n    return (\n      <div className=\"App\">\n        <div className=\"error-container\">\n          <h2 className=\"error-title\">Error Loading Data</h2>\n          <p className=\"error-message\">{error}</p>\n          <button className=\"error-retry\" onClick={() => window.location.reload()}>Try Again</button>\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"App\">\n      <header className=\"app-header\">\n        <h1 className=\"app-title\">UFO Sightings Explorer</h1>\n        <p className=\"app-subtitle\">Investigating patterns between UFO sightings, military installations, and nuclear facilities</p>\n        \n        <nav className=\"controls-container\">\n          <button \n            className={activeTab === 'overview' ? 'active' : ''} \n            onClick={() => setActiveTab('overview')}\n          >\n            Overview\n          </button>\n          <button \n            className={activeTab === 'analysis' ? 'active' : ''} \n            onClick={() => setActiveTab('analysis')}\n          >\n            Analysis\n          </button>\n          <button \n            className={activeTab === 'data' ? 'active' : ''} \n            onClick={() => setActiveTab('data')}\n          >\n            Data\n          </button>\n        </nav>\n      </header>\n      \n      <div className=\"data-stats\">\n        <div className=\"stat-card\">\n          <div className=\"stat-value\">{dataStats.totalSightings.toLocaleString()}</div>\n          <div className=\"stat-label\">Total Sightings</div>\n        </div>\n        <div className=\"stat-card\">\n          <div className=\"stat-value\">{dataStats.filteredSightings.toLocaleString()}</div>\n          <div className=\"stat-label\">Filtered Sightings</div>\n        </div>\n        <div className=\"stat-card\">\n          <div className=\"stat-value\">{dataStats.militaryBases.toLocaleString()}</div>\n          <div className=\"stat-label\">Military Bases</div>\n        </div>\n        <div className=\"stat-card\">\n          <div className=\"stat-value\">{dataStats.nuclearFacilities.toLocaleString()}</div>\n          <div className=\"stat-label\">Nuclear Facilities</div>\n        </div>\n      </div>\n      \n      <DataControls \n        yearRange={yearRange}\n        onYearRangeChange={setYearRange}\n        selectedStates={selectedStates}\n        onStateSelection={setSelectedStates}\n        allStates={allStates}\n        selectedShapes={selectedShapes}\n        onShapeSelection={setSelectedShapes}\n        ufoShapes={ufoShapes}\n        showMilitaryBases={showMilitaryBases}\n        onToggleMilitaryBases={() => setShowMilitaryBases(!showMilitaryBases)}\n        showNuclearReactors={showNuclearReactors}\n        onToggleNuclearReactors={() => setShowNuclearReactors(!showNuclearReactors)}\n        viewMode={viewMode}\n        onViewModeChange={setViewMode}\n        dataOptimizationLevel={dataOptimizationLevel}\n        onDataOptimizationChange={setDataOptimizationLevel}\n      />\n      \n      {activeTab === 'overview' && (\n        <main>\n          <section className=\"visualization-container\">\n            <div className=\"chart-container\">\n              <div className=\"chart\">\n                <MapVisualization \n                  ufoData={optimizedUFOData}\n                  militaryBaseData={showMilitaryBases ? militaryBaseData : []}\n                  nuclearReactorData={showNuclearReactors ? nuclearReactorData : []}\n                  usMapData={usMapData}\n                  viewMode={viewMode}\n                  isRendering={isRendering}\n                  renderingProgress={renderingProgress}\n                />\n              </div>\n              <div className=\"chart-description\">\n                <h3>Geographic Distribution</h3>\n                <p>\n                  This map visualizes the geographic distribution of UFO sightings across the United States, \n                  along with the locations of military bases and nuclear facilities.\n                </p>\n                <p>\n                  The visualization supports multiple view modes:\n                </p>\n                <ul>\n                  <li><strong>Map:</strong> Individual points for each sighting</li>\n                  <li><strong>Heatmap:</strong> Density of sightings shown as a heatmap</li>\n                  <li><strong>Clusters:</strong> Grouped sightings for better performance</li>\n                </ul>\n                <p>\n                  Data optimization level: <strong>{dataOptimizationLevel}</strong><br />\n                  Points displayed: <strong>{optimizedUFOData.length.toLocaleString()}</strong>\n                </p>\n              </div>\n            </div>\n          </section>\n          \n          <section className=\"visualization-container\">\n            <div className=\"chart-container\">\n              <div className=\"chart\">\n                <TimelineChart \n                  ufoData={filteredUFOData} \n                  yearRange={yearRange}\n                />\n              </div>\n              <div className=\"chart-description\">\n                <h3>Temporal Distribution</h3>\n                <p>\n                  This chart shows the number of UFO sightings over time, allowing you to identify \n                  trends, spikes, and patterns in reporting frequency.\n                </p>\n                <p>\n                  Notable periods of increased sightings often correlate with:\n                </p>\n                <ul>\n                  <li>Major media coverage of UFO phenomena</li>\n                  <li>Government disclosures or reports</li>\n                  <li>Popular culture events (movies, TV shows)</li>\n                </ul>\n              </div>\n            </div>\n          </section>\n          \n          <section className=\"visualization-container\">\n            <div className=\"chart-container\">\n              <div className=\"chart\">\n                <StateRankingChart \n                  ufoData={filteredUFOData}\n                  selectedStates={selectedStates}\n                />\n              </div>\n              <div className=\"chart-description\">\n                <h3>State Rankings</h3>\n                <p>\n                  This chart ranks states by the number of reported UFO sightings, \n                  normalized by population to account for differences in state size.\n                </p>\n                <p>\n                  Top state for selected filters: <strong>{dataStats.topState}</strong><br />\n                  Most common UFO shape: <strong>{dataStats.topShape}</strong>\n                </p>\n              </div>\n            </div>\n          </section>\n        </main>\n      )}\n      \n      {activeTab === 'analysis' && (\n        <main>\n          <section className=\"visualization-container\">\n            <div className=\"chart-container\">\n              <div className=\"chart\">\n                <NuclearProximityAnalysis \n                  ufoData={filteredUFOData}\n                  nuclearReactorData={nuclearReactorData}\n                />\n              </div>\n              <div className=\"chart-description\">\n                <h3>Nuclear Facility Proximity Analysis</h3>\n                <p>\n                  This analysis examines the relationship between UFO sightings and their proximity \n                  to nuclear facilities across the United States.\n                </p>\n                <p>\n                  The chart shows the percentage of UFO sightings that occur within different \n                  distance ranges from the nearest nuclear facility.\n                </p>\n              </div>\n            </div>\n          </section>\n          \n          <section className=\"visualization-container\">\n            <div className=\"chart-container\">\n              <div className=\"chart\">\n                <ProximityAnalysis \n                  ufoData={filteredUFOData}\n                  militaryBaseData={militaryBaseData}\n                  dataType=\"military\"\n                />\n              </div>\n              <div className=\"chart-description\">\n                <h3>Military Base Proximity Analysis</h3>\n                <p>\n                  This analysis examines the relationship between UFO sightings and their proximity \n                  to military installations across the United States.\n                </p>\n                <p>\n                  The chart shows the percentage of UFO sightings that occur within different \n                  distance ranges from the nearest military base.\n                </p>\n              </div>\n            </div>\n          </section>\n        </main>\n      )}\n      \n      {activeTab === 'data' && (\n        <main>\n          <section className=\"visualization-container\">\n            <div className=\"chart-container\">\n              <div className=\"chart\">\n                <h3>Data Sources</h3>\n                <p>\n                  The UFO Sightings Explorer uses data from the following sources:\n                </p>\n                <ul>\n                  <li>UFO Sightings: National UFO Reporting Center (NUFORC)</li>\n                  <li>Military Bases: Department of Defense</li>\n                  <li>Nuclear Facilities: U.S. Nuclear Regulatory Commission</li>\n                </ul>\n                <p>\n                  Data date range: <strong>{dataStats.dateRange}</strong>\n                </p>\n              </div>\n              <div className=\"chart-description\">\n                <h3>Data Processing</h3>\n                <p>\n                  The data undergoes several processing steps:\n                </p>\n                <ul>\n                  <li>Cleaning and normalization</li>\n                  <li>Geocoding (converting addresses to coordinates)</li>\n                  <li>Filtering out invalid or incomplete records</li>\n                  <li>Optimization for visualization performance</li>\n                </ul>\n              </div>\n            </div>\n          </section>\n        </main>\n      )}\n      \n      <footer className=\"footer\">\n        <p>UFO Sightings Explorer &copy; {new Date().getFullYear()} | Data visualization project</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}